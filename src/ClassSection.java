/*************************************************************************
 * Title: PIMA Community College ClassSection class
 * File: ClassSection.java
 * Author: James Eli
 * Date: 9/5/2016
 *
 * This is a ClassSection class for the PIMA Community College that 
 * includes instance fields for CRN, Department Code, Course Number, 
 * Instructional Mode, Meeting Days, Meeting Times, Capacity, Enrollment, 
 * and Instructor ID. The fields are all defined as private. The class 
 * includes accessors and mutators for all of the fields. Extensive input 
 * validation is performed to assure the fields are in an acceptable format 
 * and range. This class implements serialization, and overrides the 
 * toString(), equals() and hashCode() methods.  
 *
 * Notes:
 *  (1) Uses StringBuilder, so not multithreaded safe.
 *  (2) Compiled with java SE JDK 8, Update 102 (JDK 8u102).
 * 
 * Submitted in partial fulfillment of the requirements of PCC CIS-131.
 *************************************************************************
 * Change Log:
 *   09/1/2016: Initial release. JME
 *   09/6/2016: Corrected constructor parameter enrollment. JME
 *   09/6/2016: Added StudentEnrollee ArrayList and methods. JME
 *************************************************************************/
import java.io.Serializable; // Permits serializing the class.
import java.util.List;
import java.util.ArrayList;

public class ClassSection implements Serializable {
  // Serialization ID generated by eclipse (Mars).  
  private static final long serialVersionUID = 1L;
  
  /*********************************************************************
   * Instance fields (all private)
   *********************************************************************/
  private int courseReferenceNumber; // Course Reference Number (cannot be negative).
  private String departmentCode;     // Department Code.
  private int courseNumber;          // Course Number (cannot be negative).
  private String instructionalMode;  // Instructional Mode.
  private String meetingDays;        // Meeting days for course (on-ground and hybrid only, otherwise "N/A").
  private String meetingTimes;       // Meeting times for course (on-ground and hybrid only, otherwise "N/A").
  private int capacity;              // Student capacity of course (cannot be negative).
  private int enrollment;            // Number students enrolled in course (cannot be negative).
  private int instructorID;          // Instructor ID  (cannot be negative).
  // ArrayList of enrolled students (with fields for student ID and grade).
  private List<StudentEnrollee> students = new ArrayList<StudentEnrollee>();

  /*********************************************************************
   * Class constructors.
   *********************************************************************/
  // 9 parameter class constructor. Throws NullPointerException for null strings 
  // input, and IllegalArgumentException for integers <0.
  ClassSection( 
         int crn,        // Course reference number
         String code,    // Department code
         int num,        // Course number
         String mode,    // Instructional mode
         String days,    // Meeting days for course
         String times,   // Meeting times for course
         int capacity,   // Course student capacity
         int enrollment, // Number students enrolled in course (corrected 9/6/2016) 
         int id          // Instructor ID
         // Note, ArrayList students not passed to constructor.
  ) {
    // Validate all fields.
    if ( crn < 0 ) // Throw exception for impossible CRN.
      throw new IllegalArgumentException( "CRN can't be < 0." );
    else
      courseReferenceNumber = crn;

    if ( code == null ) // Throw exception for null name data.
      throw new NullPointerException( "Department code can't be null." );
    else 
      departmentCode = code;

    if ( num < 0 ) // Throw exception for impossible course number.
      throw new IllegalArgumentException( "Course number can't be < 0." );
    else
      courseNumber = num;

    if ( mode == null ) // Throw exception for null instructional mode.
      throw new NullPointerException( "Instructional Mode can't be null." );
    else 
      instructionalMode = mode;

    if ( days == null ) // Throw exception for null mtg dates.
      throw new NullPointerException( "Meeting days can't be null." );
    else 
      meetingDays = days;

    if ( times == null ) // Throw exception for null mtg times.
      throw new NullPointerException( "Meeting times can't be null." );
    else 
      meetingTimes = times;
    
    if ( capacity < 0 ) // Throw exception for impossible capacity.
      throw new IllegalArgumentException( "Capacity can't be < 0." );
    else
      this.capacity = capacity;

    if ( enrollment < 0 ) // Throw exception for impossible enrollment.
      throw new IllegalArgumentException( "Enrollment can't be < 0." );
    else
      this.enrollment = enrollment;

    if ( id < 0 ) // Throw exception for impossible instructor id.
      throw new IllegalArgumentException( "Instructo ID can't be < 0." );
    else
      instructorID = id;
  }

  // Naked constructor.
  ClassSection() {
    this( 0, "", 0, "", "", "", 0, 0, 0 );
  }

  /*********************************************************************
   * Class mutators.
   *********************************************************************/
  // Throws IllegalArgumentException for crn<0.
  public void setCRN( int crn ) throws IllegalArgumentException {
    if ( crn < 0 )       // Throw exception for impossible crn.
      throw new IllegalArgumentException( "CRN can't be negative." );
    courseReferenceNumber = crn;
  }

  // Throws NullPointerException for null string input.
  public void setDepartmentCode( String code ) throws NullPointerException {
    if ( code == null )  // Throw exception for null data.
      throw new NullPointerException( "Department code can't be null." );
    departmentCode = code;
  }
  
  // Throws IllegalArgumentException for course number<0.
  public void setCourseNumber( int num ) throws IllegalArgumentException {
    if ( num < 0 )       // Throw exception for impossible course number.
      throw new IllegalArgumentException( "Course number can't be negative." );
    courseNumber = num;
  }

  // Throws NullPointerException for null string input.
  public void setInstructionalMode( String mode ) throws NullPointerException {
    if ( mode == null )  // Throw exception for null data.
      throw new NullPointerException( "Instructional mode can't be null." );
    instructionalMode = mode;
  }

  // Throws NullPointerException for null string input.
  public void setMeetingDays( String days ) throws NullPointerException {
    if ( days == null )  // Throw exception for null data.
      throw new NullPointerException( "Meeting days can't be null." );
    meetingDays = days;
  }
  
  // Throws NullPointerException for null string input.
  public void setMeetingTimes( String times ) throws NullPointerException {
    if ( times == null ) // Throw exception for null data.
      throw new NullPointerException( "Meeting times can't be null." );
    meetingTimes = times;
  }

  // Throws IllegalArgumentException for capacity<0.
  public void setCapacity( int capacity ) throws IllegalArgumentException {
    if ( capacity < 0 )  // Throw exception for impossible course capacity.
      throw new IllegalArgumentException( "Capacity can't be negative." );
    this.capacity = capacity;
  }

  // Throws IllegalArgumentException for enrollment<0.
  public void setEnrollment( int enrollment ) throws IllegalArgumentException {
    if ( enrollment < 0 )  // Throw exception for impossible course enrollment.
      throw new IllegalArgumentException( "Enrollment can't be negative." );
    this.enrollment = enrollment;
  }

  // Throws IllegalArgumentException for instructor id<0.
  public void setInstructorID( int id ) throws IllegalArgumentException {
    if ( id < 0 )        // Throw exception for impossible instructor id.
      throw new IllegalArgumentException( "Instructor ID can't be negative." );
    instructorID = id;
  }

  /*********************************************************************
   * Class accessors.
   *********************************************************************/
  public int getCRN() { return courseReferenceNumber; }
  public String getDepartmentCode() { return departmentCode; }
  public int getCourseNumber() { return courseNumber; }
  public String getInstructionalMode() { return instructionalMode; }
  public String getMeetingDays() { return meetingDays; }
  public String getMeetingTimes() { return meetingTimes; }
  public int getCapacity() { return capacity; }
  public int getEnrollment() { return students.size(); } // updated: 9/6/2016 JME
  public int getInstructorID() { return instructorID; }

  /*********************************************************************
   * Class methods.
   *********************************************************************/
  // Add an individual student to the enrollee list.
  public boolean addStudent( final int id ) {
    // Check if this id already enrolled, otherwise enroll the student.
    if ( students.stream().anyMatch( (e) -> e.getStudentID( ) == id ) ) 
      return false;
    else
	  return students.add( new StudentEnrollee( id, 0 ) );
  }
  
  // Locate the ArrayList element which holds the enrollee with a particular student ID.
  public StudentEnrollee locateStudent( int id ) {
    // Does student exist, if so return the student object, or null.
    return students.stream().filter( (e) -> e.getStudentID( ) == id ).findFirst().orElse( null );
  }
  
  // Withdraw student.
  public boolean withdrawStudent( int id ) {
    // Find enrolled student or null and attempt to remove from list.
	StudentEnrollee enrolledStudent = students.stream().filter( (e) -> e.getStudentID( ) == id ).findFirst().orElse( null );
	return students.remove( enrolledStudent );
  }
  
  // Assign grade to a student.
  public void assignStudentGrade( int id, int grade ) {
    // Validate grade.
    if ( grade >= StudentEnrollee.MIN_GRADE && grade <= StudentEnrollee.MAX_GRADE ) {
      // Find enrolled student or null and set grade.
	  StudentEnrollee enrolledStudent = students.stream().filter( (e) -> e.getStudentID( ) == id ).findFirst().orElse( null );
	  enrolledStudent.setStudentGrade( grade );
    }
  }
  
  // Display a list of enrolled students.
  public void displayStudentsEnrolled() {
    assert ( students != null ) : "displayStudentsEnrolled: student list null.";
    students.forEach( System.out::println );    
  }

  /*********************************************************************
   * Overridden methods.
   *********************************************************************/
  @Override
  // Override toString method.
  public String toString() {
    // Create empty builder.
    StringBuilder s = new StringBuilder();
    // Build string.
    s.append( "CRN                 : " + courseReferenceNumber + "\r\n" );
    s.append( "Department          : " + departmentCode + "\r\n" );
    s.append( "Course number       : " + courseNumber + "\r\n" );
    s.append( "Instructional mode  : " + instructionalMode + "\r\n" );
    s.append( "Meeting days        : " + meetingDays + "\r\n" );
    s.append( "Meeting times       : " + meetingTimes + "\r\n" );
    s.append( "Capacity            : " + capacity + "\r\n" );
    s.append( "Enrollment          : " + enrollment + "\r\n" );
    s.append( "Instructor's ID     : " + instructorID + "\r\n" );
    // Convert to String and return.
    return s.toString();
  }

  @Override
  // Implementing equal operator. @see java.lang.Object#equals(java.lang.Object)
  public boolean equals( Object cs ) {
    // Test referential equality?
    if ( cs == this )
      return true;
    // Check null?
    if ( cs == null )
      return false;
    // Instance of our class?
    if ( !( cs instanceof ClassSection ) )
      return false; 
    // Test field equivalence.
    ClassSection that = ( ClassSection ) cs;
    if ( this.courseReferenceNumber == that.courseReferenceNumber && 
         ( this.departmentCode != null && this.departmentCode.equals( that.departmentCode ) ) &&
         this.courseNumber == that.courseNumber && 
         ( this.instructionalMode != null && this.instructionalMode.equals( that.instructionalMode ) ) &&
         ( this.meetingDays != null && this.meetingDays.equals( that.meetingDays ) ) &&
         ( this.meetingTimes != null && this.meetingTimes.equals( that.meetingTimes ) ) &&
         this.capacity == that.capacity &&
         this.instructorID == that.instructorID )
      return true;
    else 
      return false;
  }

  @Override
  // Implementing hashCode operator. Required since equals() was overriden.
  public int hashCode() {
    // hash code algorithm defined per the book "Effective Java" by J. Bloch
    // @see java.lang.Object#hashCode()
    int result=1; 
      
    result = 31 * result + courseReferenceNumber;
    result = 31 * result + courseNumber;
    result = 31 * result + capacity;
    result = 31 * result + enrollment;
    result = 31 * result + instructorID;
    result = 31 * result + ( departmentCode == null ? 0 : departmentCode.hashCode() );
    result = 31 * result + ( instructionalMode == null ? 0 : instructionalMode.hashCode() );
    result = 31 * result + ( meetingDays == null ? 0 : meetingDays.hashCode() );
    result = 31 * result + ( meetingTimes == null ? 0 : meetingTimes.hashCode() );
    return result;    
  }

} // End of ClassSection class.
